{\bf Very long respond alert!}
\section*{Algorithm}
Pick $c=7$ as it is the first value that works in reverse (trying from 13).
The main method {\tt Select} $(k,n)$:
\begin{itemize}
\item If $n$ is small (say, 20), sort the input and return the $k^{th}$ element.
\item Sort the input into columns of 7's; $13n/7$ comparisons.
\item Pass the input to {\tt SelectHelper}; $T_\text{helper}(n)$.
\end{itemize}
The helper method {\tt SelectHelper} $(k,n)$.
\begin{itemize}
\item {\bf New} Pre-condition: requires that the input is sorted.
\item If $n$ is small (say, 20), sort the input and return the $k^{th}$ element.
\item Recursively find the median-of-median; $T_\text{helper}(n/7)$.
\item Determine where median-of-median fits on each column and filter unwanted elements; $T_\text{filter}(n)$.
\item {\bf New} Now there are at most $n(7+(7-1)/2)/2/7 = 5n/7$ elements left; {\tt reoder} the partitions to restore the sorted ordering; $T_\text{reorder}(5n/7)$.
\item Recurse on the remaining input; $T_\text{helper}(5n/7)$.
\end{itemize}

\section*{Main Ideas}
First, consider this algorithm in terms of input's geometry.

\begin{Verbatim}[samepage=true]
          n/7
    -----------------
    |       |       |
 4  |   A   |   C   | 3
    |       |-------|
     -------|       |
 3  |   B   |   D   | 4
    |       |       |
    -----------------
\end{Verbatim}

Where $A$ is the partition that consists of elements $\le$ the median-of-median; $D$ is the partition that consists of elements $\ge$ the median-of-median; $B$ and $C$ are partitions that needs to be check against the median-of-median in the filtering phase.

The major improvement comes from the fact that all columns remain in sorted order, albeit not necessarily in the same size, after the partitioning (i.e. Determine...).
This means that we can exploit this property and sort less elements.

Let $A \bullet B$ be all of the columns of 7 elements in partition $A$ and $B$.
Without loss of generality, assumes that the median-of-median is less than the $k^{th}$ (target) element, so that the next iteration will take partition $A$, and subsets of $B$ and $C$ -- the other way follows a mirrored argument.

\subsection*{Array Mapping for (Column Size, List of Columns)}
First, I introduce this data structure that can be built in linear time, in 0 comparisons.
This is built after filtering by the median-of-median.
The algorithm is simple.
\begin{itemize}
\item Create an array $M$ of 7 elements for the basis of the mapping.
\item For each column $c$ in $n/7$ columns, append $c$ to $M[size(c)]$.
\end{itemize}
For example,
\begin{verbatim}
M[1] = (1), (95), (65), ...
M[2] = (2,34), (77,94), (23,56), ...
...
M[7] = (100,101,102,103,104,105,106), ...
\end{verbatim}
Note that each column remains sorted.
This data structure allows $O(1)$ search for available columns.
Let's define a method called {\tt minAvailable}, such that it returns the column that has the minimum size.

\subsection*{New Method ``{\tt reoder}"}
Notice that each sub-column of 5 elements in $A$ is in sorted order.
Here, we are trying to move {\bf the smallest columns} (doable due to the mapping $M$) from $C$ into partition $B$, so that each column $A \bullet B$ has at most 15 elements.

Notice that this is a {\bf greedy algorithm}; in particular, {\bf the size of the last column for inserting into $B$ is the minimum size of all columns in $C$. 
In addition to a counter of the number of rows inserted to $B$, they allow a tighter upper bound.}

Since $c=7$, so each column in $B$ is at most size 3.
Thus, there are 3 cases:
\begin{itemize}
\item
(Corner case) The {\bf second last} column that have inserted is of size {\bf 3}.
Consequently, $|B| + |C| \approx 3n/7$ (all columns are full).
Then, $A \bullet B$ is already sorted... well, just sort $C$ by ``brute force."
\begin{align*}
T_\text{case 1} &\le |C| / 7 * 13 = \frac{3/14}{7} *13 \\
	&\le 0.39795918367346938776n
\end{align*}
\item
The {\bf second last} column inserted to $B$ is of size {\bf 1}.
This means all other, possibly except the last, column is of size 1.
Notice there are $n/7$ columns, so this means that $B$ now contains $\le 2n/14 + 2$ elements (the last column can be of size 2 or 3), which is $\le |B| \le 3n/14$.
Moreover, $|C| = 0$.

In this case, we just insert elements of $B$ into $A$ (based on binary search), and when $B$ runs out of element, we pick the last element in the last column of $A$ to insert.

Recall that $A$ is already sorted and each column has exactly 4 elements.
\begin{align*}
T_\text{case 2} &\le |A| / 7 \bigg( \floor{\lg (4 \times 5 \times 6)} + 3\bigg) = \frac{4/14}{7} *9 \\
	&\le 0.36734693877551020408n
\end{align*}
\item
The {\bf second last} column inserted to $B$ is of size 2.
In this case, we want to maximize the columns of size 3 in $C$.

Consider the number of columns that are spent on $B$.
Since $|B| \le 3n/14$, so it takes $n/14$ rows of size 2 to fill $2n/14$ elements.
Then, an additional $n/14/2$ rows of size 2 are needed to fill the remaining $n/14$ elements.
In other words, $n/14+n/14/2 = 3n/28$ columns are needed.
But there are only $n/7$ columns, so there are only
\begin{align*}
n/7-3n/28 &= n/28
\text{ columns of size 3.} \\
\implies |B| + |C| &\le 2 \times \frac{3n}{28} + 3 \times \frac{n}{28} \\
	&\le \frac{9n}{28} \\
\implies |C| &\le \frac{9n}{28} - |B| = \frac{9n}{28} - \frac{3n}{14}\\
	&\le \frac{3n}{28}
\end{align*}

{\bf At this point, I stopped working and started celebrating... This bound took me like a week to figure out... YAHOOOOOO!!!}

The rest is just ``brute force":
\begin{itemize}
\item
Swap $B$ and $C$, so that $B$ now has $n/28$ columns of size 3, and then {\tt merge} (merge-sort style, $n$ comparisons for 2 lists, each of size $n$) them with half of the columns in $A$.
\item
Insert the remaining half ($n/28$ columns) in $B$ into $A$ with the help of binary search.
\item
Then just sort $C$, and done.
\end{itemize}
\begin{align*}
T_\text{case 3} (n) &\le \frac{|A|+|B|}{2} + \frac{|A|/2}{4} \bigg( \floor{\lg (4 \times 5 \times 6)} + 3\bigg) + \frac{|C|}{7} \times 13 \\
	&\le \frac{n}{4} + \frac{9n}{28} + \frac{39n}{196} = \frac{151n}{196} \\
	&\le 0.77040816326530612245n
\end{align*}
\end{itemize}

Thus, we have
\begin{align*}
T_\text{reorder} &\le \max(T_\text{case 1}, T_\text{case 2}, T_\text{case 3}) \\
	&\le T_\text{case 3}
\end{align*}

\subsection*{Reduce Time for Filtering Partitions $B$ and $C$}
Another aspect of reducing the number of comparisons for filtering $B$ and $C$ for the next iteration.
The assignment description suggests that all 3 elements ($\Theta(n)$ comparisons) in $B$'s and $C$'s columns are needed to check, but recall that each column is sorted, so we can use binary search instead ($1 + \floor{\lg n}$).
In other words, the number of comparisons for ``Determine..." is now
\begin{align*}
T_\text{filter}(n) &\le \frac{n}{7} (1+\floor{\lg 3}) \\
	&\le \frac{2n}{7}
\end{align*}

\subsection*{Analysis}
The upper bound of the main method:
\begin{align*}
T(n) \le 13n/7 + T_\text{helper}(n)
\end{align*}
The upper bound of the helper method:
\begin{align*}
T_\text{helper} (n) &\le T_\text{helper}(n/7) + T_\text{filter}(n) + T_\text{reorder}(5n/7) + T_\text{helper}(5n/7) \\
	&\le T_\text{helper}(n/7) + \frac{2n}{7} + \frac{151(5n/7)}{196} + T_\text{helper}(5n/7)
\end{align*}
Suppose $T_\text{helper}(n) \le \alpha n$, then
\begin{align*}
T_\text{helper} (n) &\le \frac{\alpha n}{7} + \frac{1147n}{1372} + \frac{5 \alpha n}{7} \\
\implies \alpha n &\ge \frac{6 \alpha n}{7} + \frac{1147n}{1372} \\
	\alpha &\ge 5.85204081632653061224 \\
	\implies T(n) &\le 7.70918367346938775510n
\end{align*}
So, pick $\alpha = 8$, and then check the base case:
\begin{align*}
T(20) &= 62 & \text{from table for sorting 20 elements} \\
	&\le 160 = 8n
\end{align*}
Therefore, everything works and the we have the required constant.
\done

\clearpage

\subsection*{Reference for Question 2}
\begin{itemize}
\item
The Wiki example that shows a table of 100 elements after partitioning\footnote{\url{http://en.wikipedia.org/wiki/Median_of_medians#Properties_of_pivot}}, which I starred at it for 20+ hours, and realize that the partition $A$ and $B$ can be re-used.
\item
The BFPRT paper, which is a trap in making me to stare at those hardcore combinatorics arguments, wasting me like 1-2 days to wander around in space.
One thing that I stole from it is the precondition that the helper method needs the partially sorted input.
\item
The other papers for the 2.9n and 3n upper bound; it is unfortunate that they were written in the Elvish Language -- perhaps Gandalf can understand them, but normal human beings like me do not understand them.
\item
CS341 -- without that class, I would not be able to think about using greedy algorithms to bound the size of $C$.
\end{itemize}

Despite that I have spent so much time on this question, I did not regret it.
Now, time to rush assignments for CS446, CS456, CS458, and STAT231; and pick companies for Co-op...
